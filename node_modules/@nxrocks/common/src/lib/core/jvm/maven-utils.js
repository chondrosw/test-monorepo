"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addSpotlessMavenPlugin = exports.getMavenSpotlessConfig = exports.addMavenPlugin = exports.SPOTLESS_MAVEN_PLUGIN_VERSION = exports.SPOTLESS_MAVEN_PLUGIN_ARTIFACT_ID = exports.SPOTLESS_MAVEN_PLUGIN_GROUP_ID = void 0;
const utils_1 = require("../utils");
exports.SPOTLESS_MAVEN_PLUGIN_GROUP_ID = 'com.diffplug.spotless';
exports.SPOTLESS_MAVEN_PLUGIN_ARTIFACT_ID = 'spotless-maven-plugin';
exports.SPOTLESS_MAVEN_PLUGIN_VERSION = '2.20.2';
function addMavenPlugin(tree, rootFolder, groudId, artifactId, version, configuration) {
    const pomXmlStr = tree.read(`${rootFolder}/pom.xml`, 'utf-8');
    const pomXml = utils_1.readXml(pomXmlStr);
    const pluginGrouIdNode = utils_1.findXmlMatching(pomXml, '/project/build/plugins/plugin/groupId/text()[.="' + groudId + '"]');
    const pluginArtifactIdNode = utils_1.findXmlMatching(pomXml, '/project/build/plugins/plugin/artifactId/text()[.="' + artifactId + '"]');
    if (pluginGrouIdNode && pluginArtifactIdNode) {
        return false; // plugin already exists
    }
    const projectNode = utils_1.findXmlMatching(pomXml, '/project');
    if (!projectNode)
        throw new Error('The POM.xml is invalid (no "<project>" node found)');
    const buildNode = utils_1.findXmlMatching(pomXml, '/project/build');
    if (!buildNode) { // make sure the <build> node exists
        utils_1.addXmlNode(projectNode, {
            'build': {
                'plugins': {}
            }
        });
    }
    let pluginsNode = utils_1.findXmlMatching(pomXml, '/project/build/plugins');
    if (!pluginsNode) { // make sure the <plugins> node exists
        utils_1.addXmlNode(buildNode, {
            'plugins': {}
        });
        pluginsNode = utils_1.findXmlMatching(pomXml, '/project/build/plugins');
    }
    const pluginNode = configuration && typeof configuration === 'object' ?
        {
            'plugin': Object.assign(Object.assign({ 'groupId': groudId, 'artifactId': artifactId }, (version && { 'version': version })), { 'configuration': configuration })
        } :
        `<plugin>
            <groupId>${groudId}</groupId>
            <artifactId>${artifactId}</artifactId>
            ${version ? `<version>${version}</version>` : ''}
            ${configuration ? `<configuration>${configuration}</configuration>` : ''}
        </plugin>`;
    utils_1.addXmlNode(pluginsNode, pluginNode);
    tree.write(`${rootFolder}/pom.xml`, pomXml.toString({ prettyPrint: true, indent: '\t' }));
    return true;
}
exports.addMavenPlugin = addMavenPlugin;
function getMavenSpotlessBaseConfig(languageConfig, baseGitBranch) {
    const ratchetFrom = baseGitBranch ? utils_1.stripIndent `
    <!-- optional: limit format enforcement to just the files changed by this feature branch -->
    <ratchetFrom>${baseGitBranch}</ratchetFrom>
    ` : '';
    return utils_1.stripIndent `
        ${ratchetFrom}
        <formats>
            <!-- you can define as many formats as you want, each is independent -->
            <format>
                <!-- define the files to apply to -->
                <includes>
                <include>*.md</include>
                <include>.gitignore</include>
                </includes>
                <!-- define the steps to apply to those files -->
                <trimTrailingWhitespace/>
                <endWithNewline/>
                <indent>
                <tabs>true</tabs>
                <spacesPerTab>4</spacesPerTab>
                </indent>
            </format>
        </formats>
        ${languageConfig}`;
}
function getMavenSpotlessConfig(language, jdkVersion, baseGitBranch) {
    switch (language) {
        case 'java':
            return getMavenSpotlessBaseConfig(utils_1.stripIndent `
                <java>
                    <!-- to customize, go to https://github.com/diffplug/spotless/tree/main/plugin-maven#java -->

                    <!-- Use the default importOrder configuration -->
                    <importOrder/>

                    <!-- Clean up -->
                    <removeUnusedImports/>

                    <!-- Apply google-java-format formatter -->
                    <googleJavaFormat/>

                </java`, baseGitBranch);
        case 'kotlin':
            return getMavenSpotlessBaseConfig(utils_1.stripIndent `
                <kotlin>
                    <!-- to customize, go to https://github.com/diffplug/spotless/tree/main/plugin-maven#kotlin -->

                    <!-- Use the default importOrder configuration -->
                    <importOrder/>

                    <!-- Clean up -->
                    <removeUnusedImports/>

                    <!-- Apply ${jdkVersion && jdkVersion >= 11 ? 'ktfmt formatter(similar to google-java-format, but for Kotlin)' : 'ktlint formatter'} -->
                    ${jdkVersion && jdkVersion >= 11 ? '<ktfmt/>' : '<ktlint/>'}

                </kotlin>`, baseGitBranch);
        case 'groovy':
            return getMavenSpotlessBaseConfig(utils_1.stripIndent `
                <groovy>
                    <!-- to customize, go to https://github.com/diffplug/spotless/tree/main/plugin-maven#groovy -->

                    <!-- Use the default importOrder configuration -->
                    <importOrder/>

                    <!-- Clean up -->
                    <removeUnusedImports/>

                    <!-- Apply groovy-eclipse formatter -->
                    <greclipse/>

                </groovy>`, baseGitBranch);
    }
}
exports.getMavenSpotlessConfig = getMavenSpotlessConfig;
function addSpotlessMavenPlugin(tree, rootFolder, language, jdkVersion, gitBaseBranch) {
    const spotlessConfig = getMavenSpotlessConfig(language, jdkVersion, gitBaseBranch);
    return addMavenPlugin(tree, rootFolder, exports.SPOTLESS_MAVEN_PLUGIN_GROUP_ID, exports.SPOTLESS_MAVEN_PLUGIN_ARTIFACT_ID, exports.SPOTLESS_MAVEN_PLUGIN_VERSION, spotlessConfig);
}
exports.addSpotlessMavenPlugin = addSpotlessMavenPlugin;
//# sourceMappingURL=maven-utils.js.map