"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addSpotlessGradlePlugin = exports.applySpotlessGradlePlugin = exports.getGradleSpotlessConfig = exports.addGradlePlugin = exports.hasGradlePlugin = exports.getGradlePlugins = exports.SPOTLESS_GRADLE_PLUGIN_VERSION = exports.SPOTLESS_GRADLE_PLUGIN_ID = exports.GRADLE_PLUGIN_REGEX = exports.SPOTLESS_CONFIG_REGEX = exports.GRADLE_PLUGINS_REGEX = void 0;
exports.GRADLE_PLUGINS_REGEX = /(?:plugins\s*\{\s*)([^}]+)(?:\s*\})/g;
exports.SPOTLESS_CONFIG_REGEX = /(?:(spotless|configure<com.diffplug.gradle.spotless.SpotlessExtension>)\s*\{\s*)([^}]+)(?:\s*\})/g;
exports.GRADLE_PLUGIN_REGEX = /\s*(id|java|kotlin)(?:\s*\(?\s*['"]([^'"]+)['"]\s*\)?\s*(?:version\s+['"]([^'"]+)['"])?)?/g;
exports.SPOTLESS_GRADLE_PLUGIN_ID = 'com.diffplug.spotless';
exports.SPOTLESS_GRADLE_PLUGIN_VERSION = '6.2.2';
function getGradlePlugins(content) {
    var _a;
    const plugins = [];
    const pluginsContent = (_a = new RegExp(exports.GRADLE_PLUGINS_REGEX).exec(content)) === null || _a === void 0 ? void 0 : _a[1];
    if (pluginsContent) {
        const pluginRegExp = new RegExp(exports.GRADLE_PLUGIN_REGEX);
        let pluginMatches = pluginRegExp.exec(pluginsContent);
        while (pluginMatches) {
            const id = pluginMatches[2];
            const version = pluginMatches[3];
            const kotlin = pluginMatches[1] === 'kotlin';
            const java = pluginMatches[1] === 'java';
            plugins.push({ id, version, kotlin, java });
            pluginMatches = pluginRegExp.exec(pluginsContent);
        }
    }
    return plugins;
}
exports.getGradlePlugins = getGradlePlugins;
function hasGradlePlugin(content, pluginId, pluginVersion) {
    const plugins = getGradlePlugins(content);
    return plugins.some(plugin => plugin.id === pluginId && (!pluginVersion || plugin.version === pluginVersion));
}
exports.hasGradlePlugin = hasGradlePlugin;
function addGradlePlugin(tree, rootFolder, language, pluginId, pluginVersion, withKotlinDSL = language === 'kotlin') {
    const ext = withKotlinDSL ? '.gradle.kts' : '.gradle';
    const buildGradle = tree.read(`${rootFolder}/build${ext}`, 'utf-8');
    const pluginToAdd = withKotlinDSL ? `id("${pluginId}") version "${pluginVersion}"` : `id '${pluginId}' version '${pluginVersion}'`;
    if (!hasGradlePlugin(buildGradle, pluginId)) {
        if (!exports.GRADLE_PLUGINS_REGEX.test(buildGradle)) {
            const plugins = `plugins {\n\t${pluginToAdd}\n}\n`;
            tree.write(`${rootFolder}/build${ext}`, plugins + buildGradle);
        }
        else {
            const newBuildGradle = buildGradle.replace(exports.GRADLE_PLUGINS_REGEX, (match, content) => {
                return `plugins {\n\t${content}\t${pluginToAdd}\n}`;
            });
            tree.write(`${rootFolder}/build${ext}`, newBuildGradle);
        }
        return true;
    }
    return false;
}
exports.addGradlePlugin = addGradlePlugin;
function getGradleSpotlessBaseConfig(language, languageConfig, baseGitBranch, withKotlinDSL = language === 'kotlin') {
    const ratchetFrom = baseGitBranch ?
        `// optional: limit format enforcement to just the files changed by this feature branch
    ratchetFrom${withKotlinDSL ? `("${baseGitBranch}")` : ` '${baseGitBranch}'`}
    ` : '';
    return `
${withKotlinDSL ? 'configure<com.diffplug.gradle.spotless.SpotlessExtension>' : 'spotless'} {
    ${ratchetFrom}
    format${withKotlinDSL ? '("misc")' : " 'misc',"} {
        // define the files to apply 'misc' to
        target${withKotlinDSL ? '("*.gradle.kts", "*.md", ".gitignore")' : " '*.gradle', '*.md', '.gitignore'"}
    
        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }
    ${languageConfig}
}
`;
}
function getGradleSpotlessConfig(language, jdkVersion, baseGitBranch, withKotlinDSL = language === 'kotlin') {
    switch (language) {
        case 'java':
            return getGradleSpotlessBaseConfig(language, `
    java {// to customize, go to https://github.com/diffplug/spotless/tree/main/plugin-gradle#java

        target${withKotlinDSL ? '("src/*/java/**/*.java")' : " 'src/*/java/**/*.java'"}

        // Use the default importOrder configuration
        importOrder()

        // Clean up
        removeUnusedImports()

        // Apply google-java-format formatter
        googleJavaFormat()
    }`, baseGitBranch, withKotlinDSL);
        case 'kotlin':
            return getGradleSpotlessBaseConfig(language, `
    kotlin { // to customize, go to https://github.com/diffplug/spotless/tree/main/plugin-gradle#kotlin

        ${jdkVersion && jdkVersion >= 11 ? '// Apply ktfmt formatter(similar to google-java-format, but for Kotlin)' : '// Apply ktlint formatter'}
        ${jdkVersion && jdkVersion >= 11 ? 'ktfmt()' : 'ktlint()'}
    }
    kotlinGradle {
        target${withKotlinDSL ? '("*.gradle.kts")' : " '*.gradle.kts'"} // default target for kotlinGradle
        ${jdkVersion && jdkVersion >= 11 ? 'ktfmt()' : 'ktlint()'}
    }`, baseGitBranch, withKotlinDSL);
        case 'groovy':
            return getGradleSpotlessBaseConfig(language, `
    groovy {// to customize, go to https://github.com/diffplug/spotless/tree/main/plugin-gradle#groovy

        // Use the default importOrder configuration
        importOrder()

        // Clean up
        removeUnusedImports()

        // Apply groovy-eclipse formatter
        greclipse()
    }
    groovyGradle {
        target${withKotlinDSL ? '("*.gradle")' : " '*.gradle'"} // default target of groovyGradle
        greclipse()
    }`, baseGitBranch, withKotlinDSL);
    }
}
exports.getGradleSpotlessConfig = getGradleSpotlessConfig;
function applySpotlessGradlePlugin(tree, rootFolder, language, jdkVersion, gitBaseBranch, withKotlinDSL = language === 'kotlin') {
    const ext = withKotlinDSL ? '.gradle.kts' : '.gradle';
    const buildGradle = tree.read(`${rootFolder}/build${ext}`, 'utf-8');
    if (!exports.SPOTLESS_CONFIG_REGEX.test(buildGradle)) {
        const spotlessConfig = getGradleSpotlessConfig(language, jdkVersion, gitBaseBranch, withKotlinDSL);
        tree.write(`${rootFolder}/build${ext}`, buildGradle + spotlessConfig);
        return true;
    }
    return false;
}
exports.applySpotlessGradlePlugin = applySpotlessGradlePlugin;
function addSpotlessGradlePlugin(tree, rootFolder, language, jdkVersion, gitBaseBranch, withKotlinDSL = language === 'kotlin') {
    const added = addGradlePlugin(tree, rootFolder, language, exports.SPOTLESS_GRADLE_PLUGIN_ID, exports.SPOTLESS_GRADLE_PLUGIN_VERSION, withKotlinDSL);
    if (added) {
        applySpotlessGradlePlugin(tree, rootFolder, language, jdkVersion, gitBaseBranch, withKotlinDSL);
    }
    return added;
}
exports.addSpotlessGradlePlugin = addSpotlessGradlePlugin;
//# sourceMappingURL=gradle-utils.js.map