"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAndPublishPackages = void 0;
const tslib_1 = require("tslib");
const child_process_1 = require("child_process");
const fs_extra_1 = require("fs-extra");
const fs_1 = require("fs");
process.env.PUBLISHED_VERSION = `0.0.0-development`; // 9999.0.2
function buildAndPublishPackages(port = 4873) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        process.env.npm_config_registry = `http://localhost:${port}`;
        process.env.YARN_REGISTRY = process.env.npm_config_registry;
        if (!process.env.NX_E2E_SKIP_BUILD_CLEANUP) {
            if (!process.env.CI) {
                console.log(`
  Did you know that you can run the command with:
    > NX_E2E_SKIP_BUILD_CLEANUP - saves time by reusing the previously built local packages
    > CI - simulate the CI environment settings\n`);
            }
            yield Promise.all([
                fs_extra_1.remove('./dist'),
                fs_extra_1.remove('./dist/local-registry'),
            ]);
        }
        if (!process.env.NX_E2E_SKIP_BUILD_CLEANUP || !fs_1.existsSync('./dist/local-registry/storage/@nxrocks')) {
            build();
            try {
                yield updateVersionsAndPublishPackages();
                console.log('‚ú® Done publishing packages');
            }
            catch (e) {
                console.log(e);
                process.exit(1);
            }
        }
        else {
            console.log(`\n‚è© Project building skipped. Reusing the existing packages`);
        }
    });
}
exports.buildAndPublishPackages = buildAndPublishPackages;
const getDirectories = (source) => fs_1.readdirSync(source, { withFileTypes: true })
    .filter((dirent) => dirent.isDirectory())
    .map((dirent) => dirent.name);
function updateVersionsAndPublishPackages() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const npmMajorVersion = child_process_1.execSync(`npm --version`)
            .toString('utf-8')
            .trim()
            .split('.')[0];
        const directories = getDirectories('./dist/packages');
        yield Promise.all(directories.map((pkg) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            updateVersion(`./dist/packages/${pkg}`);
            publishPackage(`./dist/packages/${pkg}`, +npmMajorVersion);
        })));
    });
}
function updateVersion(packagePath) {
    return child_process_1.execSync(`npm version ${process.env.PUBLISHED_VERSION} --allow-same-version`, {
        cwd: packagePath,
    });
}
function publishPackage(packagePath, npmMajorVersion) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (process.env.npm_config_registry.indexOf('http://localhost') === -1) {
            throw Error(`
      ------------------
      üí£ ERROR üí£ => $NPM_REGISTRY does not look like a local registry'
      ------------------
    `);
        }
        try {
            console.log(` üì¶ Publishing package '${packagePath}' to '${process.env.npm_config_registry}'...`);
            // NPM@7 requires a token to publish, thus, is just a matter of fake a token to bypass npm.
            // See: https://twitter.com/verdaccio_npm/status/1357798427283910660
            if (npmMajorVersion >= 7) {
                fs_extra_1.writeFileSync(`${packagePath}/.npmrc`, `registry=${process.env.npm_config_registry}\n${process.env.npm_config_registry.replace('http:', '')}/:_authToken=fake`);
            }
            child_process_1.execSync(`npm publish`, {
                cwd: packagePath,
                env: process.env,
                stdio: ['ignore', 'ignore', 'ignore'],
            });
        }
        catch (e) {
            console.log(e);
            if (e instanceof Error && e.message.indexOf('Cannot publish over existing version') > -1) {
                console.log('Version to publish already exists in registry. Ignoring');
                process.exit(0);
            }
            else {
                process.exit(1);
            }
        }
    });
}
function build() {
    try {
        const startTime = new Date().getTime();
        child_process_1.execSync('npx nx run-many --target=build --all --parallel=8', {
            stdio: ['pipe', 'pipe', 'pipe'],
            env: Object.assign(Object.assign({}, process.env), { NX_INVOKED_BY_RUNNER: 'false' }),
        });
        const endTime = new Date().getTime();
        console.log(`üèó Packages built successfully in ${endTime - startTime}ms`);
    }
    catch (e) {
        console.log(e.output.toString());
        console.log('Build failed. See error above.');
        process.exit(1);
    }
}
//# sourceMappingURL=build-package-publish.js.map