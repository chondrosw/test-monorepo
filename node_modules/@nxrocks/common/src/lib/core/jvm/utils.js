"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkProjectBuildFileContains = exports.getJvmPackageInfo = exports.getGradleBuildFilesExtension = exports.hasGradleProject = exports.isGradleProject = exports.hasMavenProject = exports.isMavenProject = exports.runBuilderCommand = void 0;
const devkit_1 = require("@nrwl/devkit");
const child_process_1 = require("child_process");
const fileutils_1 = require("@nrwl/workspace/src/utils/fileutils");
const workspace_1 = require("../workspace");
const utils_1 = require("../utils");
function runBuilderCommand(commandAlias, getBuilder, params, options = { ignoreWrapper: false }) {
    // Take the parameters or set defaults
    const cwd = options.cwd || process.cwd();
    const buildSystem = getBuilder(cwd);
    const executable = buildSystem.getExecutable(options.ignoreWrapper);
    const command = buildSystem.getCommand(commandAlias);
    // Create the command to execute
    const execute = `${executable} ${command} ${(params || []).join(' ')}`;
    try {
        devkit_1.logger.info(`Executing command: ${execute}`);
        child_process_1.execSync(execute, { cwd, stdio: [0, 1, 2] });
        return { success: true };
    }
    catch (e) {
        devkit_1.logger.error(`Failed to execute command: ${execute}`);
        devkit_1.logger.error(e);
        return { success: false };
    }
}
exports.runBuilderCommand = runBuilderCommand;
function isMavenProject(project) {
    return fileutils_1.fileExists(workspace_1.getProjectFilePath(project, 'pom.xml'));
}
exports.isMavenProject = isMavenProject;
function hasMavenProject(cwd) {
    return fileutils_1.fileExists(`${cwd}/pom.xml`);
}
exports.hasMavenProject = hasMavenProject;
function isGradleProject(project) {
    return (fileutils_1.fileExists(workspace_1.getProjectFilePath(project, 'build.gradle')) ||
        fileutils_1.fileExists(workspace_1.getProjectFilePath(project, 'build.gradle.kts')));
}
exports.isGradleProject = isGradleProject;
function hasGradleProject(cwd) {
    return fileutils_1.fileExists(`${cwd}/build.gradle`) ||
        fileutils_1.fileExists(`${cwd}/build.gradle.kts`);
}
exports.hasGradleProject = hasGradleProject;
function getGradleBuildFilesExtension(project) {
    if (fileutils_1.fileExists(workspace_1.getProjectFilePath(project, 'build.gradle.kts'))) {
        return '.gradle.kts';
    }
    return fileutils_1.fileExists(workspace_1.getProjectFilePath(project, 'build.gradle')) ? '.gradle' : '';
}
exports.getGradleBuildFilesExtension = getGradleBuildFilesExtension;
function getJvmPackageInfo(project) {
    var _a, _b;
    if (isMavenProject(project)) {
        // maven project
        const pomXmlStr = workspace_1.getProjectFileContent(project, 'pom.xml');
        const pomXmlNode = utils_1.readXml(pomXmlStr);
        const groupId = utils_1.findXmlNodeContent(pomXmlNode, `/project/groupId/text()`);
        const artifactId = utils_1.findXmlNodeContent(pomXmlNode, `/project/artifactId/text()`);
        const dependencies = [];
        const dependencyNodes = utils_1.findXmlMatching(pomXmlNode, `/project/dependencies/dependency`);
        dependencyNodes.each((node) => {
            const depGroupId = utils_1.findXmlNodeContent(node, `/dependency/groupId/text()`);
            const depArtifactId = utils_1.findXmlNodeContent(node, `/dependency/artifactId/text()`);
            dependencies.push({
                packageId: `${depGroupId}:${depArtifactId}`,
                packageFile: 'pom.xml',
            });
        });
        return {
            packageId: `${groupId}:${artifactId}`,
            packageFile: 'pom.xml',
            dependencies,
        };
    }
    if (isGradleProject(project)) {
        // gradle project
        const ext = getGradleBuildFilesExtension(project);
        const buildGradle = workspace_1.getProjectFileContent(project, `build${ext}`);
        const settingsGradle = workspace_1.getProjectFileContent(project, `settings${ext}`);
        const groupId = (_a = buildGradle.match(/group\s*=\s*['"]([^"']+)['"]/)) === null || _a === void 0 ? void 0 : _a[1];
        const artifactId = (_b = settingsGradle.match(/rootProject\.name\s*=\s*['"]([^"']+)['"]/)) === null || _b === void 0 ? void 0 : _b[1];
        const dependencies = [];
        const dependencyIds = buildGradle.match(/\s*(api|implementation|testImplementation)\s*['"]([^"']+)['"]/) || [];
        for (const depId of dependencyIds) {
            dependencies.push({
                packageId: depId,
                packageFile: `build.gradle${ext}`,
            });
        }
        return {
            packageId: `${groupId}:${artifactId}`,
            packageFile: `build.gradle${ext}`,
            dependencies,
        };
    }
    throw new Error(`Cannot inspect dependencies of project at: '${workspace_1.getProjectRoot(project)}'.\n` + `No 'pom.xml' nor 'build.gradle[.kts]' was found.`);
}
exports.getJvmPackageInfo = getJvmPackageInfo;
function checkProjectBuildFileContains(project, opts) {
    const { fragments, logicalOp = (fragments === null || fragments === void 0 ? void 0 : fragments.length) == 1 ? 'and' : 'or' } = opts;
    const findOccurencesInContent = (content) => {
        return (fragments || []).reduce((acc, cur) => {
            return (logicalOp == 'and') ? acc && content.includes(cur) : acc || content.includes(cur);
        }, logicalOp == 'and');
    };
    if (isMavenProject(project)) {
        const content = workspace_1.getProjectFileContent(project, 'pom.xml');
        return findOccurencesInContent(content);
    }
    if (isGradleProject(project)) {
        const ext = getGradleBuildFilesExtension(project);
        const content = workspace_1.getProjectFileContent(project, `build${ext}`);
        return findOccurencesInContent(content);
    }
    return false;
}
exports.checkProjectBuildFileContains = checkProjectBuildFileContains;
//# sourceMappingURL=utils.js.map