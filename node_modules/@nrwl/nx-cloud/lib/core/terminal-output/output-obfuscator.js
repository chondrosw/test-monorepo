"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutputObfuscator = void 0;
const stripJsonComments = require("strip-json-comments");
const fs_1 = require("fs");
class OutputObfuscator {
    constructor() {
        this.maskedProperties = [];
        this.maskedProperties = this.loadSecretKeys();
    }
    obfuscate(terminalOutput) {
        if (!this.maskedProperties.length) {
            return terminalOutput;
        }
        /**
         * Replace instances of a secret key being used as a command flag
         * --secret-key=somekey => --secret-key=********
         * or
         * --secretKey=somekey => --secretKey=********
         */
        this.maskedProperties.forEach((secretKey) => {
            const commandFlagPattern = new RegExp(`(--${secretKey}=)[\\S]*`);
            terminalOutput = terminalOutput.replace(commandFlagPattern, '$1********');
        });
        /**
         * Replace instances of a secret key's value that exists in process.env
         * by reverse lookup
         */
        const secretValues = this.maskedProperties
            .filter((secretKey) => secretKey in process.env)
            .map((secretKey) => process.env[secretKey]);
        secretValues.forEach((secretValue) => {
            terminalOutput = terminalOutput.replace(secretValue, '********');
        });
        return terminalOutput;
    }
    toCamelCase(input) {
        if (input.indexOf('-') > 1) {
            return input
                .toLowerCase()
                .replace(/-(.)/g, (match, group1) => group1.toUpperCase());
        }
        else {
            return input;
        }
    }
    loadSecretKeys() {
        var _a;
        const userDefinedMaskedProps = (_a = JSON.parse(stripJsonComments((0, fs_1.readFileSync)('nx.json').toString()))
            .tasksRunnerOptions.default.options.maskedProperties) !== null && _a !== void 0 ? _a : [];
        /**
         * Try and convert all secret keys from snake-case to camelCase so we can properly
         * find/replace content from task.params
         */
        const camelCaseSecretProps = userDefinedMaskedProps.map(this.toCamelCase);
        // Remove dupes
        return Array.from(new Set(userDefinedMaskedProps.concat(camelCaseSecretProps)));
    }
}
exports.OutputObfuscator = OutputObfuscator;
//# sourceMappingURL=output-obfuscator.js.map