"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.projectGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const common_1 = require("@nxrocks/common");
const flutter_utils_1 = require("../../utils/flutter-utils");
const lib_1 = require("./lib");
function projectGenerator(tree, options) {
    var _a, _b;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!flutter_utils_1.isFlutterInstalled()) {
            throw new Error("'flutter' was not found on your system's PATH.\nPlease make sure you have installed it correctly.\nüëâüèæ https://flutter.dev/docs/get-started/install");
        }
        const normalizedOptions = lib_1.normalizeOptions(tree, options);
        if (options.interactive)
            yield lib_1.promptAdditionalOptions(tree, normalizedOptions);
        const targets = {};
        const commands = [
            { key: 'analyze', value: 'analyze' },
            { key: 'clean', value: 'clean' },
            { key: 'format', value: `format ${normalizedOptions.projectRoot}/*` },
            { key: 'test', value: 'test' },
        ];
        if (normalizedOptions.template === 'app') {
            commands.push({ key: 'assemble', value: 'assemble' }, { key: 'attach', value: 'attach' }, { key: 'drive', value: 'drive' }, { key: 'genL10n', value: 'gen-l10n' }, { key: 'install', value: 'install' }, { key: 'run', value: 'run' });
        }
        if (((_a = normalizedOptions.platforms) === null || _a === void 0 ? void 0 : _a.indexOf('android')) != -1) {
            commands.push({ key: 'buildAar', value: 'build aar' }, { key: 'buildApk', value: 'build apk' }, { key: 'buildAppbundle', value: 'build appbundle' }, { key: 'buildBundle', value: 'build bundle' });
        }
        if (((_b = normalizedOptions.platforms) === null || _b === void 0 ? void 0 : _b.indexOf('ios')) != -1) {
            commands.push({ key: 'buildIos', value: 'build ios' }, { key: 'buildIosFramework', value: 'build ios-framework' }, { key: 'buildIpa', value: 'build ipa' });
        }
        for (const command of commands) {
            targets[command.key] = {
                executor: `@nrwl/workspace:run-commands`,
                options: {
                    command: `flutter ${command.value}`,
                    cwd: normalizedOptions.projectRoot
                }
            };
        }
        devkit_1.addProjectConfiguration(tree, normalizedOptions.projectName, {
            root: normalizedOptions.projectRoot,
            sourceRoot: `${normalizedOptions.projectRoot}/src`,
            projectType: normalizedOptions.template === 'app' ? 'application' : 'library',
            targets: targets,
            tags: normalizedOptions.parsedTags,
        });
        yield lib_1.generateFlutterProject(tree, normalizedOptions);
        common_1.addPluginToNxJson(common_1.NX_FLUTTER_PKG, tree);
    });
}
exports.projectGenerator = projectGenerator;
exports.default = projectGenerator;
//# sourceMappingURL=generator.js.map